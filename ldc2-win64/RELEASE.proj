<Project DefaultTargets="All" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    MSBuild script to create release version of LDC.
    Configures and compiles LLVM and LDC and creates release zip file.
    Uses ninja to reduce compile time.
  -->

  <PropertyGroup>
    <!-- General setup -->
    <Platform Condition="'$(Platform)' == '' ">x86</Platform>
  </PropertyGroup>
  <Choose>
    <When Condition="'$(Platform)' == 'X64'">
      <PropertyGroup>
        <WinName>win64</WinName>
        <CurlBin>bin64</CurlBin>
        <CurlLib>lib64</CurlLib>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <WinName>win32</WinName>
        <CurlBin>bin</CurlBin>
        <CurlLib>lib32mscoff</CurlLib>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <!-- The CMake build type -->
    <CMakeBuildType>Release</CMakeBuildType>
    <!-- Temporary directory for all build artefacts -->
    <BaseDir>C:\Temp</BaseDir>
    <BuildDir>$(BaseDir)\LDC-BUILD$(Platform)</BuildDir>
    <SrcDir>$(BuildDir)\src</SrcDir>
    <WrkDir>$(BuildDir)\wrk</WrkDir>
    <InstallDir>$(BuildDir)\install</InstallDir>
    <!-- CMake executable -->
    <CMakeExe>cmake</CMakeExe>
    <!-- Git executable -->
    <GitExe>git</GitExe>
    <!-- Ninja executable -->
    <NinjaExe>ninja</NinjaExe>
    <!-- 7zip executable -->
    <SevenZipExe>C:\Program Files\7-Zip\7z.exe</SevenZipExe>
    <!-- Python executable -->
    <PythonExe>C:/Program Files/Python/Python35/python.exe</PythonExe>

    <!-- LibConfig -->
    <LibConfigSrcFile>C:\Software\LibConfig\libconfig-1.4.9.tar.gz</LibConfigSrcFile>
    <LibConfigSrcDir>$(SrcDir)\libconfig-1.4.9</LibConfigSrcDir>
    <LibConfigWrkDir>$(WrkDir)\libconfig</LibConfigWrkDir>
    <LibConfigInstallDir>$(InstallDir)\libconfig</LibConfigInstallDir>

    <!-- LibCurl -->
    <LibCurlArchiveFile>C:\Software\curl\libcurl-7.51.0-WinSSL-zlib-x86-x64.zip</LibCurlArchiveFile>
    <LibCurlArchiveDir>$(InstallDir)\libcurl-7.51.0-WinSSL-zlib-x86-x64</LibCurlArchiveDir>
    <LibCurlArchiveDllFile>$(LibCurlArchiveDir)\dmd2\windows\$(CurlBin)\libcurl.dll</LibCurlArchiveDllFile>
    <LibCurlArchiveLibFile>$(LibCurlArchiveDir)\dmd2\windows\$(CurlLib)\curl.lib</LibCurlArchiveLibFile>

    <!-- LLVM -->
    <LLVMSrcFile>C:\Software\LLVM\llvm-3.9.0.src.tar.xz</LLVMSrcFile>
    <LLVMSrcDir>$(SrcDir)\llvm-3.9.0.src</LLVMSrcDir>
    <LLVMWrkDir>$(WrkDir)\llvm</LLVMWrkDir>
    <LLVMInstallDir>$(InstallDir)\llvm</LLVMInstallDir>
    <LLVMTargetsToBuild>X86;ARM;PowerPC;Mips;Sparc</LLVMTargetsToBuild>

    <!-- DUB -->
    <DUBVersion>v1.1.1-beta.1</DUBVersion>
    <DUBGitSource>https://github.com/dlang/dub.git</DUBGitSource>
    <DUBSrcDir>$(SrcDir)\dub</DUBSrcDir>

    <!-- LDC -->
    <LDCVersion>1.1.0</LDCVersion>
    <LDCVersionSuffix>-beta4</LDCVersionSuffix>

    <!-- Use the following properties to clone from local git folder
    <LDCGitSource>C:/OpenSource/ldc/ldc</LDCGitSource>
    <LDCDRuntimeGitSource>C:/OpenSource/ldc/ldc/runtime/druntime</LDCDRuntimeGitSource>
    <LDCPhobosGitSource>C:/OpenSource/ldc/ldc/runtime/phobos</LDCPhobosGitSource>
    <LDCTestGitSource>C:/OpenSource/ldc/ldc/tests/d2/dmd-testsuite</LDCTestGitSource>
    -->
    <LDCGitSource>https://github.com/ldc-developers/ldc.git</LDCGitSource>
    <LDCDRuntimeGitSource>https://github.com/ldc-developers/druntime.git</LDCDRuntimeGitSource>
    <LDCPhobosGitSource>https://github.com/ldc-developers/phobos.git</LDCPhobosGitSource>
    <LDCTestGitSource>https://github.com/ldc-developers/dmd-testsuite.git</LDCTestGitSource>

    <LDCSrcDir>$(SrcDir)\ldc</LDCSrcDir>
    <LDCWrkDir>$(WrkDir)\ldc</LDCWrkDir>
    <LDCInstallDir>$(InstallDir)\ldc2-$(LDCVersion)$(LDCVersionSuffix)-$(WinName)-msvc</LDCInstallDir>
    <LDCArchiveFileName>ldc2-$(LDCVersion)$(LDCVersionSuffix)-$(WinName)-msvc.zip</LDCArchiveFileName>
  </PropertyGroup>

  <ItemGroup>
    <LibConfigDirectories Include="$(LibConfigSrcDir);$(LibConfigWrkDir);$(LibConfigInstallDir)"/>
    <LibCurlDirectories Include="$(LibCurlArchiveDir)"/>
    <LLVMDirectories Include="$(LLVMSrcDir);$(LLVMWrkDir);$(LLVMInstallDir)"/>
    <DUBDirectories Include="$(DUBSrcDir)"/>
    <LDCDirectories Include="$(LDCSrcDir);$(LDCWrkDir);$(LDCInstallDir)"/>
  </ItemGroup>

  <Target Name="LibConfig">
    <RemoveDir Directories="@(LibConfigDirectories)" />
    <MakeDir Directories="$(LibConfigSrcDir);$(LibConfigWrkDir)"/>
    <Exec Command="&quot;$(SevenZipExe)&quot; x &quot;$(LibConfigSrcFile)&quot; -so | &quot;$(SevenZipExe)&quot; x -aoa -si -ttar -o. &gt; nul" WorkingDirectory="$(LibConfigSrcDir)\.."/>
    <Move SourceFiles="$(LibConfigSrcDir)\lib\libconfig.h" DestinationFiles="$(LibConfigSrcDir)\lib\libconfig.h.in" />
    <ReplaceFileText InputFilename="$(LibConfigSrcDir)\lib\libconfig.h.in" OutputFilename="$(LibConfigSrcDir)\lib\libconfig.h" MatchExpression="LIBCONFIG_EXPORTS" ReplacementText="LIBCONFIG_EXPORT"/>
    <CallTarget Targets="LibConfigCMakeLists"/>
    <Exec Command="&quot;$(CMakeExe)&quot; -G Ninja -DCMAKE_BUILD_TYPE=$(CMakeBuildType) &quot;$(LibConfigSrcDir)&quot;" WorkingDirectory="$(LibConfigWrkDir)"/>
    <Exec Command="&quot;$(NinjaExe)&quot;" WorkingDirectory="$(LibConfigWrkDir)"/>
  </Target>

  <Target Name="LibCurl">
    <RemoveDir Directories="@(LibCurlArchiveDir)" />
    <MakeDir Directories="$(LibCurlArchiveDir)"/>
    <Exec Command="&quot;$(SevenZipExe)&quot; x &quot;$(LibCurlArchiveFile)&quot; &gt; nul" WorkingDirectory="$(LibCurlArchiveDir)"/>
  </Target>

  <Target Name="LLVM">
    <RemoveDir Directories="@(LLVMDirectories)" />
    <MakeDir Directories="@(LLVMDirectories)"/>
    <Exec Command="&quot;$(SevenZipExe)&quot; x &quot;$(LLVMSrcFile)&quot; -so | &quot;$(SevenZipExe)&quot; x -aoa -si -ttar -o. &gt; nul" WorkingDirectory="$(LLVMSrcDir)\.."/>
    <Exec Command="&quot;$(CMakeExe)&quot; -G Ninja -DCMAKE_BUILD_TYPE=$(CMakeBuildType) &quot;$(LLVMSrcDir)&quot; -DCMAKE_INSTALL_PREFIX=&quot;$(LLVMInstallDir)&quot; -DPYTHON_EXECUTABLE=&quot;$(PythonExe)&quot; -DLLVM_TARGETS_TO_BUILD=&quot;$(LLVMTargetsToBuild)&quot; -DLLVM_APPEND_VC_REV=ON -DLLVM_ENABLE_ZLIB=OFF" WorkingDirectory="$(LLVMWrkDir)"/>
    <Exec Command="&quot;$(NinjaExe)&quot; install" WorkingDirectory="$(LLVMWrkDir)"/>
  </Target>

  <Target Name="LDC">
    <RemoveDir Directories="@(LDCDirectories)" />
    <MakeDir Directories="@(LDCDirectories)"/>
    <Exec Command="&quot;$(GitExe)&quot; clone --branch release-$(LDCVersion) --single-branch $(LDCGitSource) ldc" WorkingDirectory="$(LDCSrcDir)\.."/>
    <CallTarget Targets="LDCGitModules"/>
    <Exec Command="&quot;$(GitExe)&quot; submodule init" WorkingDirectory="$(LDCSrcDir)"/>
    <Exec Command="&quot;$(GitExe)&quot; submodule update" WorkingDirectory="$(LDCSrcDir)"/>
    <!-- build bootstrap LDC using automatically detected D compiler -->
    <MakeDir Directories="$(LDCWrkDir)\bootstrap"/>
    <Exec Command="&quot;$(CMakeExe)&quot; -G Ninja -DCMAKE_BUILD_TYPE=$(CMakeBuildType) &quot;$(LDCSrcDir)&quot; -DLLVM_ROOT_DIR=&quot;$(LLVMInstallDir.Replace('\','/'))&quot; -DLIBCONFIG_INCLUDE_DIR=&quot;$(LibConfigSrcDir.Replace('\','/'))/lib&quot; -DLIBCONFIG_LIBRARY=&quot;$(LibConfigWrkDir.Replace('\','/'))/libconfig.lib&quot;" WorkingDirectory="$(LDCWrkDir)\bootstrap"/>
    <Copy SourceFiles="$(LibConfigWrkDir)\libconfig.dll" DestinationFolder="$(LDCWrkDir)\bootstrap\bin"/>
    <Exec Command="&quot;$(NinjaExe)&quot;" WorkingDirectory="$(LDCWrkDir)\bootstrap"/>
    <!-- rebuild LDC with bootstrap compiler -->
    <Exec Command="&quot;$(CMakeExe)&quot; -G Ninja -DCMAKE_BUILD_TYPE=$(CMakeBuildType) &quot;$(LDCSrcDir)&quot; -DLLVM_ROOT_DIR=&quot;$(LLVMInstallDir.Replace('\','/'))&quot; -DLIBCONFIG_INCLUDE_DIR=&quot;$(LibConfigSrcDir.Replace('\','/'))/lib&quot; -DLIBCONFIG_LIBRARY=&quot;$(LibConfigWrkDir.Replace('\','/'))/libconfig.lib&quot; -DD_COMPILER=&quot;$(LDCWrkDir)\bootstrap\bin\ldmd2.exe&quot; -DCMAKE_INSTALL_PREFIX=&quot;$(LDCInstallDir.Replace('\','/'))&quot;" WorkingDirectory="$(LDCWrkDir)"/>
    <Copy SourceFiles="$(LibConfigWrkDir)\libconfig.dll" DestinationFolder="$(LDCWrkDir)\bin"/>
    <Exec Command="&quot;$(NinjaExe)&quot; install" WorkingDirectory="$(LDCWrkDir)"/>
    <ReplaceFileText InputFilename="$(LDCInstallDir)\etc\ldc2.conf" OutputFilename="$(LDCInstallDir)\etc\ldc2.conf" MatchExpression="(?i)$(LDCInstallDir.Replace('\','/'))" ReplacementText="%%ldcbinarypath%%/.."/>
    <Copy SourceFiles="$(LibCurlArchiveDllFile)" DestinationFolder="$(LDCInstallDir)\bin"/>
    <Copy SourceFiles="$(LibCurlArchiveLibFile)" DestinationFolder="$(LDCInstallDir)\lib"/>
    <Copy SourceFiles="$(LibConfigWrkDir)\libconfig.dll" DestinationFolder="$(LDCInstallDir)\bin"/>
  </Target>

  <Target Name="LDCMultilib">
    <PropertyGroup>
      <LDCInstallDir32>$(BaseDir)\LDC-BUILDx86\install\ldc2-$(LDCVersion)$(LDCVersionSuffix)-win32-msvc</LDCInstallDir32>
    </PropertyGroup>
    <ItemGroup>
      <_CopyItems Include="$(LDCInstallDir32)\lib\**"/>
    </ItemGroup>
    <Copy SourceFiles="@(_CopyItems)" DestinationFolder="$(LDCInstallDir)\lib32"/>
    <RenameDir FromDirectory="$(LDCInstallDir)\lib" ToDirectory="$(LDCInstallDir)\lib64"/>
    <ReplaceFileText InputFilename="$(LDCInstallDir)\etc\ldc2.conf" OutputFilename="$(LDCInstallDir)\etc\ldc2.conf" MatchExpression="%%ldcbinarypath%%/../lib" ReplacementText="%%ldcbinarypath%%/../lib64"/>
    <ReplaceFileText InputFilename="$(LDCInstallDir32)\etc\ldc2.conf" OutputFilename="$(LDCInstallDir)\etc\ldc2.conf.tmp" MatchExpression="(?s)^.*\r\ndefault:" ReplacementText="i686-pc-windows-msvc:"/>
    <ReplaceFileText InputFilename="$(LDCInstallDir)\etc\ldc2.conf.tmp" OutputFilename="$(LDCInstallDir)\etc\ldc2.conf.tmp" MatchExpression="%%ldcbinarypath%%/../lib" ReplacementText="%%ldcbinarypath%%/../lib32"/>
    <ItemGroup>
      <_FileContents Include="$([System.IO.File]::ReadAllText($(LDCInstallDir)\etc\ldc2.conf.tmp))"/>
    </ItemGroup>
    <WriteLinesToFile File="$(LDCInstallDir)\etc\ldc2.conf" Lines="@(_FileContents)" Overwrite="false" />
    <Delete Files="$(LDCInstallDir)\etc\ldc2.conf.tmp"/>
  </Target>

  <Target Name="DUB">
    <RemoveDir Directories="@(DUBDirectories)" />
    <MakeDir Directories="@(DUBDirectories)"/>
    <Exec Command="&quot;$(GitExe)&quot; clone $(DUBGitSource) dub" WorkingDirectory="$(DUBSrcDir)\.."/>
    <Exec Command="&quot;$(GitExe)&quot; checkout $(DUBVersion)" WorkingDirectory="$(DUBSrcDir)"/>
    <ReplaceFileText InputFilename="$(DUBSrcDir)\build.cmd" OutputFilename="$(DUBSrcDir)\build.cmd" MatchExpression="curl.lib" ReplacementText="&quot;$(LDCInstallDir)\lib\curl.lib&quot;"/>
    <Exec Command="(set DC=&quot;$(LDCInstallDir)\bin\ldmd2&quot;) &amp; &quot;$(DUBSrcDir)\build.cmd&quot;" WorkingDirectory="$(DUBSrcDir)"/>
    <Copy SourceFiles="$(DUBSrcDir)\bin\dub.exe" DestinationFolder="$(LDCInstallDir)\bin"/>
  </Target>

  <Target Name="ZIP">
    <Delete Files="$(InstallDir)\$(LDCArchiveFileName)"/>
    <Exec Command="&quot;$(SevenZipExe)&quot; a -tzip -mx=9 $(LDCArchiveFileName) $(LDCInstallDir) &gt; nul" WorkingDirectory="$(LDCInstallDir)\.."/>
  </Target>

  <Target Name="All">
    <CallTarget Targets="LibConfig;LLVM;LibCurl;LDC;DUB"/>
    <CallTarget Targets="LDCMultilib" Condition="'$(Platform)' == 'X64'"/>
    <CallTarget Targets="ZIP"/>
  </Target>

  <Target Name="LDCGitModules">
    <ItemGroup>
      <Line1 Include="line01"><Text><![CDATA[
[submodule "druntime"]
	path = runtime/druntime
	url = $(LDCDRuntimeGitSource)
[submodule "phobos"]
	path = runtime/phobos
	url = $(LDCPhobosGitSource)
[submodule "tests/d2/dmd-testsuite"]
	path = tests/d2/dmd-testsuite
	url = $(LDCTestGitSource)
      ]]></Text>
      </Line1>
    </ItemGroup>
    <WriteLinesToFile File="$(LDCSrcDir)\.gitmodules" Lines="@(Line1->'%(Text)')" Overwrite="true" Encoding="utf-8"/>
  </Target>

  <Target Name="LibConfigCMakeLists">
    <ItemGroup>
      <Line2 Include="line01"><Text><![CDATA[
# CMake build file for libconfig

cmake_minimum_required(VERSION 2.8)
project(libconfig)

set(LIBCONFIG_SOURCE_DIR ${PROJECT_SOURCE_DIR}/lib)
set(LIBCONFIG__BINARY_DIR ${PROJECT_BINARY_DIR})

set(LIBCONFIG_SOURCES
    ${LIBCONFIG_SOURCE_DIR}/grammar.c
    ${LIBCONFIG_SOURCE_DIR}/libconfig.c
    ${LIBCONFIG_SOURCE_DIR}/scanctx.c
    ${LIBCONFIG_SOURCE_DIR}/scanner.c
    ${LIBCONFIG_SOURCE_DIR}/strbuf.c
    )

include_directories(${LIBCONFIG_SOURCE_DIR})

if (MSVC)
  add_definitions(
      /DYY_NO_UNISTD_H
      /DYY_USE_CONST
      /DWIN32
      /Zc:wchar_t /GR- /Gd
      /D_CRT_SECURE_NO_WARNINGS
      /wd4290
  )
endif (MSVC)

foreach(file ${LIBCONFIG++_SOURCES})
    if(file MATCHES ".*\\.c$")
        set_source_files_properties(${file} PROPERTIES
            LANGUAGE C
            COMPILE_FLAGS /EHsc
        )
    else()
        set_source_files_properties(${file} PROPERTIES
            LANGUAGE CXX
        )
    endif()
endforeach()

add_library(libconfig SHARED ${LIBCONFIG_SOURCES})

set_target_properties(
    libconfig PROPERTIES
    ARCHIVE_OUTPUT_NAME libconfig
    LIBRARY_OUTPUT_NAME libconfig
    RUNTIME_OUTPUT_NAME libconfig
)
      ]]></Text>
      </Line2>
    </ItemGroup>
    <WriteLinesToFile File="$(LibConfigSrcDir)\CMakeLists.txt" Lines="@(Line2->'%(Text)')" Overwrite="true" Encoding="utf-8"/>
  </Target>

  <UsingTask TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
              File.WriteAllText(
                  OutputFilename,
                  Regex.Replace(File.ReadAllText(InputFilename), MatchExpression, ReplacementText)
                  );
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="RenameDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FromDirectory ParameterType="System.String" Required="true" />
      <ToDirectory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
              Directory.Move(FromDirectory, ToDirectory);
            ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
